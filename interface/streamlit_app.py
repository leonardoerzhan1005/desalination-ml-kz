import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from fpdf import FPDF

# –ú–æ–¥–µ–ª—å–¥—ñ –∂“Ø–∫—Ç–µ—É
model = joblib.load("models/kz_model.pkl")

# –ñ–æ“ì–∞—Ä—ã –¥”ô–ª–¥—ñ–∫—Ç—ñ –¥–∞—Ç–∞
history_path = "data/prediction_history.csv"
if os.path.exists(history_path):
    history_df = pd.read_csv(history_path)
else:
    history_df = pd.DataFrame(columns=[
        "”©“£—ñ—Ä", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—Å—É_–¥–µ“£–≥–µ–π—ñ", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã"
    ])

# –†–µ–∞–ª–∏—Å—Ç—ñ–∫ –¥–∞—Ç–∞—Å–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É (–∞–Ω–∞–ª–∏–∑ “Ø—à—ñ–Ω)
df = pd.read_csv("data/sensor_data_kz_realistic.csv")
df["—É–∞“õ—ã—Ç"] = pd.to_datetime(df["—É–∞“õ—ã—Ç"])

st.set_page_config(page_title="–°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –∂“Ø–π–µ—Å—ñ", layout="centered")
st.title("üíß –°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ‚Äì “õ—ã—Å—ã–º –±–æ–ª–∂–∞–º—ã")

with st.expander("üìä üî¨ –ê–Ω–∞–ª–∏–∑ –∫–µ–∑–µ“£–¥–µ—Ä—ñ (–≤–∏–∑—É–∞–ª–¥—ã)"):
    st.subheader("1. üìÅ –î–∞—Ç–∞—Å–µ—Ç “õ“±—Ä—ã–ª—ã–º—ã") 
    st.dataframe(df.head())

    st.subheader("2. üåç –ë–∞—Ä–ª—ã“õ ”©“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    st.markdown("”®“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:")
    selected_region = st.selectbox("”®“£—ñ—Ä", sorted(df["”©“£—ñ—Ä"].unique()))
    filtered_df = df[df["”©“£—ñ—Ä"] == selected_region]

    fig_map = px.histogram(filtered_df, x="”ô–¥—ñ—Å",
                           title=f"{selected_region} ”©“£—ñ—Ä—ñ–Ω–¥–µ–≥—ñ —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ–Ω—ñ“£ –∂–∏—ñ–ª—ñ–≥—ñ",
                           labels={"”ô–¥—ñ—Å": "”ò–¥—ñ—Å", "count": "–ñ–∞–∑–±–∞ —Å–∞–Ω—ã"})
    st.plotly_chart(fig_map)

    st.subheader("3. üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –±–∞–π–ª–∞–Ω—ã—Å") 
    numeric_cols = ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã"]
    corr = df[numeric_cols].corr()
    fig_corr = px.imshow(corr, text_auto=True, title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è–ª—ã“õ –º–∞—Ç—Ä–∏—Ü–∞")
    st.plotly_chart(fig_corr)

    st.subheader("4. üß† –ú–æ–¥–µ–ª—å “õ–∞–ª–∞–π “Ø–π—Ä–µ—Ç—ñ–ª–¥—ñ") 
    st.markdown("""
    - –ú–æ–¥–µ–ª—å: `RandomForestRegressor`
    - –ù—ã—Å–∞–Ω–∞ (target): `—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã`
    - –¢”ô—É–µ–ª—Å—ñ–∑ –∞–π–Ω—ã–º–∞–ª—ã–ª–∞—Ä (X): `—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞`, `—Ç“±–∑–¥—ã–ª—ã“õ`, `pH`, `“õ—ã—Å—ã–º`, `—Å—É –¥–µ“£–≥–µ–π—ñ`, `”©“£—ñ—Ä_–∫–æ–¥`
    - –¢—Ä–µ–Ω–∏–Ω–≥: `data/sensor_data_kz_realistic.csv` —Ñ–∞–π–ª—ã –Ω–µ–≥—ñ–∑—ñ–Ω–¥–µ
    """)

    ...
    st.subheader("5. üß™ –ú–æ–¥–µ–ª—å “õ–∞–ª–∞–π –±–æ–ª–∂–∞–º –±–µ—Ä–µ–¥—ñ?")
    valid_df = filtered_df[filtered_df["”ô–¥—ñ—Å"].isin(["–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–∫–µ—Ä—ñ –æ—Å–º–æ—Å"])]

    if len(valid_df) == 0:
        st.warning(f"{selected_region} ”©“£—ñ—Ä—ñ–Ω–¥–µ '–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è' –Ω–µ–º–µ—Å–µ '–∫–µ—Ä—ñ –æ—Å–º–æ—Å' ”ô–¥—ñ—Å—Ç–µ—Ä—ñ —Ç—ñ—Ä–∫–µ–ª–º–µ–≥–µ–Ω.")
    else:
        example = valid_df.sample(1).iloc[0]
        st.markdown(f"""
        –ú—ã—Å–∞–ª –∂–∞–∑–±–∞:
        - ”®“£—ñ—Ä: **{example['”©“£—ñ—Ä']}**
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: **{example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']}** ¬∞C
        - –¢“±–∑–¥—ã–ª—ã“õ: **{example['—Ç“±–∑–¥—ã–ª—ã“õ']}** ppm
        - pH: **{example['pH']}**
        - –ö—ñ—Ä—É “õ—ã—Å—ã–º—ã: **{example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã']}** –±–∞—Ä
        - –°—É –¥–µ“£–≥–µ–π—ñ: **{example['—Å—É_–¥–µ“£–≥–µ–π—ñ']}** —Å–º
        - “ö–æ–ª–¥–∞–Ω—ã–ª“ì–∞–Ω ”ô–¥—ñ—Å: **{example['”ô–¥—ñ—Å']}**
        """)

        predict_input = pd.DataFrame([{
            "”©“£—ñ—Ä_–∫–æ–¥": example['”©“£—ñ—Ä_–∫–æ–¥'],
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'],
            "—Ç“±–∑–¥—ã–ª—ã“õ": example['—Ç“±–∑–¥—ã–ª—ã“õ'],
            "pH": example['pH'],
            "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã": example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã'],
            "—Å—É_–¥–µ“£–≥–µ–π—ñ": example['—Å—É_–¥–µ“£–≥–µ–π—ñ']
        }])

        predicted = model.predict(predict_input)[0]
        st.success(f"üìå –ú–æ–¥–µ–ª—å –±–æ–ª–∂–∞“ì–∞–Ω —à—ã“ì—ã—Å “õ—ã—Å—ã–º—ã: **{predicted:.2f} –±–∞—Ä**")

        st.subheader("6. üíß –ï–∫—ñ –∫–µ–∑–µ“£–¥—ñ —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –≤–∏–∑—É–∞–ª–¥—ã")
        R_nano, R_ro = 0.6, 0.95
        sal_0 = example['—Ç“±–∑–¥—ã–ª—ã“õ']
        sal_nano = sal_0 * (1 - R_nano)
        sal_ro = sal_nano * (1 - R_ro)

        stages_df = pd.DataFrame({
            "–ö–µ–∑–µ“£": ["–ë–∞—Å—Ç–∞–ø“õ—ã", "–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–ö–µ—Ä—ñ –æ—Å–º–æ—Å"],
            "–¢“±–∑–¥—ã–ª—ã“õ (ppm)": [sal_0, sal_nano, sal_ro]
        })
        fig_stages = px.line(stages_df, x="–ö–µ–∑–µ“£", y="–¢“±–∑–¥—ã–ª—ã“õ (ppm)", markers=True,
                             title="–¢“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –∫–µ–∑–µ“£–¥–µ—Ä—ñ–Ω–¥–µ–≥—ñ —Ç“±–∑–¥—ã–ª—ã“õ—Ç—ã“£ —Ç”©–º–µ–Ω–¥–µ—É—ñ")
        st.plotly_chart(fig_stages)
        if sal_ro <= 500:
            st.success(f"üü¢ –°–æ“£“ì—ã —Ç“±–∑–¥—ã–ª—ã“õ: {sal_ro:.2f} ppm ‚Äî —Å—É –∞—É—ã–∑ —Å—É“ì–∞ –∂–∞—Ä–∞–º–¥—ã")
        else:
            st.error(f"üî¥ –°–æ“£“ì—ã —Ç“±–∑–¥—ã–ª—ã“õ: {sal_ro:.2f} ppm ‚Äî —Å—É ”ô–ª—ñ –¥–µ –∂–∞—Ä–∞–º—Å—ã–∑")
#sdasda