
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px

# Load model and data
model = joblib.load("models/kz_model.pkl")
df = pd.read_csv("data/sensor_data_kz_realistic.csv")
df["—É–∞“õ—ã—Ç"] = pd.to_datetime(df["—É–∞“õ—ã—Ç"])

# Set page configuration
st.set_page_config(page_title="–°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –∂“Ø–π–µ—Å—ñ", layout="wide", page_icon="üíß")

# Custom CSS for dark mode compatibility
st.markdown("""
<style>
    :root {
        --text-color: #333;
        --bg-color: #F5F7FA;
        --info-bg: #E3F2FD;
        --button-bg: #1E88E5;
        --button-text: #FFFFFF;
    }
    [data-testid="stAppViewContainer"] {
        background-color: var(--bg-color);
        color: var(--text-color);
    }
    .main-title { 
        font-size: 2.5em; 
        color: #1E88E5; 
        text-align: center; 
        margin-bottom: 20px; 
    }
    .stage-title { 
        font-size: 1.8em; 
        color: #1565C0; 
        margin-top: 20px; 
    }
    .info-box { 
        background-color: var(--info-bg); 
        padding: 15px; 
        border-radius: 10px; 
        margin-bottom: 15px; 
        border:  direttamente 1px solid #BBDEFB;
    }
    .stButton>button { 
        background-color: var(--button-bg); 
        color: var(--button-text); 
        border-radius: 8px; 
        border: none;
    }
    .stTabs { 
        background-color: var(--info-bg); 
        padding: 10px; 
        border-radius: 10px; 
    }
    /* Dark mode adjustments */
    @media (prefers-color-scheme: dark) {
        :root {
            --text-color: #E0E0E0;
            --bg-color: #1A1A1A;
            --info-bg: #263238;
            --button-bg: #42A5F5;
            --button-text: #FFFFFF;
        }
        [data-testid="stAppViewContainer"] {
            background-color: var(--bg-color);
            color: var(--text-color);
        }
        .main-title, .stage-title {
            color: #42A5F5;
        }
        .info-box {
            border: 1px solid #546E7A;
        }
    }
</style>
""", unsafe_allow_html=True)

# Detect theme for Plotly
theme = "plotly_dark" if st.get_option("theme.base") == "dark" else "plotly"

# Main title
st.markdown('<div class="main-title">üíß –°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ‚Äì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ “õ—ã—Å—ã–º –±–æ–ª–∂–∞–º—ã</div>', unsafe_allow_html=True)
st.markdown("–ë“±–ª –±–∞“ì–¥–∞—Ä–ª–∞–º–∞ —Å—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω —Ç–∞–ª–¥–∞—É“ì–∞ –∂”ô–Ω–µ “õ—ã—Å—ã–º–¥—ã –±–æ–ª–∂–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω. ”ò—Ä –∫–µ–∑–µ“£–¥—ñ –∑–µ—Ä—Ç—Ç–µ—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ “õ–æ–π—ã–Ω–¥—ã–ª–∞—Ä–¥—ã “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.")

# Tabs for each stage
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
    "1. –î–∞—Ç–∞—Å–µ—Ç", 
    "2. ”®“£—ñ—Ä–ª–µ—Ä", 
    "3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", 
    "4. –ú–æ–¥–µ–ª—å–¥—ñ “Ø–π—Ä–µ—Ç—É", 
    "5. –ë–æ–ª–∂–∞–º", 
    "6. –¢“±—â—ã–ª–∞–Ω–¥—ã—Ä—É", 
    "7. ”®“£—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã", 
    "8. –ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã"
])

# Stage 1: Dataset Structure
with tab1:
    st.markdown('<div class="stage-title">üìÅ 1. –î–∞—Ç–∞—Å–µ—Ç “õ“±—Ä—ã–ª—ã–º—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–°–µ–Ω—Å–æ—Ä–ª–∞—Ä–¥–∞–Ω –∂–∏–Ω–∞–ª“ì–∞–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç“±–∑–¥—ã–ª—ã“õ, pH, “õ—ã—Å—ã–º, —Å—É –¥–µ“£–≥–µ–π—ñ –∂”ô–Ω–µ ”ô–¥—ñ—Å.</div>', unsafe_allow_html=True)
    rows = st.slider("–ö”©—Ä—Å–µ—Ç—ñ–ª–µ—Ç—ñ–Ω –∂–æ–ª–¥–∞—Ä —Å–∞–Ω—ã", 5, 20, 5, key="dataset_rows")
    st.dataframe(df.head(rows), use_container_width=True)

# Stage 2: Regional Visualization
with tab2:
    st.markdown('<div class="stage-title">üåç 2. ”®“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">”®“£—ñ—Ä —Ç–∞“£–¥–∞–ø, —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ–Ω—ñ“£ —Ç–∞—Ä–∞–ª—É—ã–Ω –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞–¥–∞ –∫”©—Ä—ñ“£—ñ–∑.</div>', unsafe_allow_html=True)
    selected_region = st.selectbox("”®“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", sorted(df["”©“£—ñ—Ä"].unique()), key="region_select")
    filtered_df = df[df["”©“£—ñ—Ä"] == selected_region]
    fig_map = px.histogram(filtered_df, x="”ô–¥—ñ—Å", title=f"{selected_region} ”©“£—ñ—Ä—ñ–Ω–¥–µ–≥—ñ ”ô–¥—ñ—Å—Ç–µ—Ä –∂–∏—ñ–ª—ñ–≥—ñ", color="”ô–¥—ñ—Å", template=theme)
    st.plotly_chart(fig_map, use_container_width=True)

# Stage 3: Parameter Correlation
with tab3:
    st.markdown('<div class="stage-title">üìä 3. –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –±–∞–π–ª–∞–Ω—ã—Å</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è–ª—ã“õ –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ“£ ”©–∑–∞—Ä–∞ –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.</div>', unsafe_allow_html=True)
    numeric_cols = ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã"]
    corr = df[numeric_cols].corr()
    fig_corr = px.imshow(corr, text_auto=True, title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è–ª—ã“õ –º–∞—Ç—Ä–∏—Ü–∞", color_continuous_scale="RdBu", template=theme)
    st.plotly_chart(fig_corr, use_container_width=True)

# Stage 4: Model Training
with tab4:
    st.markdown('<div class="stage-title">üß† 4. –ú–æ–¥–µ–ª—å “õ–∞–ª–∞–π “Ø–π—Ä–µ—Ç—ñ–ª–¥—ñ?</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">RandomForestRegressor —à—ã“ì—ã—Å “õ—ã—Å—ã–º—ã–Ω –±–æ–ª–∂–∞—É “Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞–π–¥—ã.</div>', unsafe_allow_html=True)
    st.markdown("""
    - **–ú–æ–¥–µ–ª—å**: RandomForestRegressor  
    - **–ù—ã—Å–∞–Ω–∞**: –®—ã“ì—ã—Å “õ—ã—Å—ã–º—ã  
    - **–ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä**: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¢“±–∑–¥—ã–ª—ã“õ, pH, –ö—ñ—Ä—É “õ—ã—Å—ã–º—ã, –°—É –¥–µ“£–≥–µ–π—ñ, ”®“£—ñ—Ä –∫–æ–¥—ã
    """)
    st.button("–ú–æ–¥–µ–ª—å —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“ì—ã—Ä–∞“õ", help="RandomForestRegressor ‚Äì –∞“ì–∞—à—Ç–∞—Ä –∞–Ω—Å–∞–º–±–ª—ñ–Ω–µ –Ω–µ–≥—ñ–∑–¥–µ–ª–≥–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º.")

# Stage 5: Model Prediction
with tab5:
    st.markdown('<div class="stage-title">üß™ 5. –ú–æ–¥–µ–ª—å –±–æ–ª–∂–∞–º—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ú–æ–¥–µ–ª—å —à—ã“ì—ã—Å “õ—ã—Å—ã–º—ã–Ω –±–æ–ª–∂–∞–π–¥—ã –∂”ô–Ω–µ —Ñ–æ—Ä–º—É–ª–∞–º–µ–Ω —Å–∞–ª—ã—Å—Ç—ã—Ä—ã–ª–∞–¥—ã.</div>', unsafe_allow_html=True)
    valid_df = filtered_df[filtered_df["”ô–¥—ñ—Å"].isin(["–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–∫–µ—Ä—ñ –æ—Å–º–æ—Å"])]
    if len(valid_df) == 0:
        st.warning(f"{selected_region} ”©“£—ñ—Ä—ñ–Ω–¥–µ '–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è' –Ω–µ–º–µ—Å–µ '–∫–µ—Ä—ñ –æ—Å–º–æ—Å' ”ô–¥—ñ—Å—Ç–µ—Ä—ñ –∂–æ“õ.")
        example = None
    else:
        example = valid_df.sample(1).iloc[0]
        st.markdown(f"""
        **–ú—ã—Å–∞–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä:**  
        - ”®“£—ñ—Ä: {example['”©“£—ñ—Ä']}  
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']} ¬∞C  
        - –¢“±–∑–¥—ã–ª—ã“õ: {example['—Ç“±–∑–¥—ã–ª—ã“õ']} ppm  
        - pH: {example['pH']}  
        - –ö—ñ—Ä—É “õ—ã—Å—ã–º—ã: {example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã']} –±–∞—Ä  
        - –°—É –¥–µ“£–≥–µ–π—ñ: {example['—Å—É_–¥–µ“£–≥–µ–π—ñ']} —Å–º
        """)
        predict_input = pd.DataFrame([{
            "”©“£—ñ—Ä_–∫–æ–¥": example["”©“£—ñ—Ä_–∫–æ–¥"],
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": example["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"],
            "—Ç“±–∑–¥—ã–ª—ã“õ": example["—Ç“±–∑–¥—ã–ª—ã“õ"],
            "pH": example["pH"],
            "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã": example["–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã"],
            "—Å—É_–¥–µ“£–≥–µ–π—ñ": example["—Å—É_–¥–µ“£–≥–µ–π—ñ"]
        }])
        predicted = model.predict(predict_input)[0]
        st.success(f"üìå –ë–æ–ª–∂–∞–Ω“ì–∞–Ω “õ—ã—Å—ã–º: **{predicted:.2f} –±–∞—Ä**")
        
        if predicted < 3:
            st.warning("‚ö†Ô∏è “ö—ã—Å—ã–º —Ç—ã–º —Ç”©–º–µ–Ω ‚Äì —Å“Ø–∑—É —Ç–∏—ñ–º—Å—ñ–∑.")
        elif predicted > 6:
            st.error("‚ùó “ö—ã—Å—ã–º —Ç—ã–º –∂–æ“ì–∞—Ä—ã ‚Äì –º–µ–º–±—Ä–∞–Ω–∞ –∑–∞“õ—ã–º–¥–∞–ª—É—ã –º“Ø–º–∫—ñ–Ω!")
        else:
            st.info("‚úÖ “ö—ã—Å—ã–º –æ–ø—Ç–∏–º–∞–ª–¥—ã!")
        
        pressure_formula = 0.0025 * example['—Ç“±–∑–¥—ã–ª—ã“õ'] + 0.05 * example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] - 0.3 * example['pH']
        st.write(f"–§–æ—Ä–º—É–ª–∞ –±–æ–π—ã–Ω—à–∞ “õ—ã—Å—ã–º: **{pressure_formula:.2f} –±–∞—Ä**")
        
        weights = {
            "–¢“±–∑–¥—ã–ª—ã“õ": 0.0025 * example['—Ç“±–∑–¥—ã–ª—ã“õ'],
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": 0.05 * example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'],
            "pH (—Ç–µ—Ä—ñ—Å)": -0.3 * example['pH']
        }
        df_weights = pd.DataFrame.from_dict(weights, orient="index", columns=["“ö–æ—Å“õ–∞–Ω “Ø–ª–µ—Å—ñ (–±–∞—Ä)"]).reset_index()
        df_weights.rename(columns={"index": "–§–∞–∫—Ç–æ—Ä"}, inplace=True)
        fig_formula = px.bar(df_weights, x="–§–∞–∫—Ç–æ—Ä", y="“ö–æ—Å“õ–∞–Ω “Ø–ª–µ—Å—ñ (–±–∞—Ä)", title="–§–æ—Ä–º—É–ª–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω—ñ“£ “Ø–ª–µ—Å—ñ", text_auto=True, template=theme)
        st.plotly_chart(fig_formula, use_container_width=True)

# Stage 6: Two-Stage Desalination
with tab6:
    st.markdown('<div class="stage-title">üíß 6. –ï–∫—ñ –∫–µ–∑–µ“£–¥—ñ —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∂”ô–Ω–µ –∫–µ—Ä—ñ –æ—Å–º–æ—Å –∞—Ä“õ—ã–ª—ã —Ç“±–∑–¥—ã–ª—ã“õ—Ç—ã“£ —Ç”©–º–µ–Ω–¥–µ—É—ñ.</div>', unsafe_allow_html=True)
    st.markdown("""
    **–§–æ—Ä–º—É–ª–∞–ª–∞—Ä:**  
    - –ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: $$TDS_{nano} = TDS_0 \times (1 - R_{nano})$$  
    - –ö–µ—Ä—ñ –æ—Å–º–æ—Å: $$TDS_{ro} = TDS_{nano} \times (1 - R_{ro})$$
    """)
    if example is None:
        st.warning("–ê–ª–¥—ã“£“ì—ã –∫–µ–∑–µ“£–¥–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä —Ç–∞“£–¥–∞–ª–º–∞“ì–∞–Ω. ”®“£—ñ—Ä–¥–µ '–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è' –Ω–µ–º–µ—Å–µ '–∫–µ—Ä—ñ –æ—Å–º–æ—Å' ”ô–¥—ñ—Å—Ç–µ—Ä—ñ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.")
    else:
        R_nano, R_ro = 0.6, 0.95
        sal_0 = example['—Ç“±–∑–¥—ã–ª—ã“õ']
        sal_nano = sal_0 * (1 - R_nano)
        sal_ro = sal_nano * (1 - R_ro)
        stages_df = pd.DataFrame({
            "–ö–µ–∑–µ“£": ["–ë–∞—Å—Ç–∞–ø“õ—ã", "–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–ö–µ—Ä—ñ –æ—Å–º–æ—Å"],
            "–¢“±–∑–¥—ã–ª—ã“õ (ppm)": [sal_0, sal_nano, sal_ro]
        })
        fig_stages = px.line(stages_df, x="–ö–µ–∑–µ“£", y="–¢“±–∑–¥—ã–ª—ã“õ (ppm)", markers=True, title="–¢“±–∑–¥—ã–ª—ã“õ—Ç—ã“£ —Ç”©–º–µ–Ω–¥–µ—É—ñ", template=theme)
        st.plotly_chart(fig_stages, use_container_width=True)
        if sal_ro <= 500:
            st.success(f"üü¢ –¢“±–∑–¥—ã–ª—ã“õ: {sal_ro:.2f} ppm ‚Äì –∞—É—ã–∑ —Å—É“ì–∞ –∂–∞—Ä–∞–º–¥—ã!")
        else:
            st.error(f"üî¥ –¢“±–∑–¥—ã–ª—ã“õ: {sal_ro:.2f} ppm ‚Äì —Å—É –∂–∞—Ä–∞–º—Å—ã–∑.")

# Stage 7: Regional Statistics
with tab7:
    st.markdown('<div class="stage-title">üìä 7. ”®“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">”®“£—ñ—Ä–ª–µ—Ä–¥—ñ“£ –æ—Ä—Ç–∞—à–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ. –ï“£ –∂–æ“ì–∞—Ä—ã –º”ô–Ω–¥–µ—Ä –µ—Ä–µ–∫—à–µ–ª–µ–Ω–µ–¥—ñ.</div>', unsafe_allow_html=True)
    region_summary = df.groupby("”©“£—ñ—Ä")[["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã"]].mean().round(2).reset_index()
    st.dataframe(region_summary.style.highlight_max(axis=0), use_container_width=True)

# Stage 8: Feature Importance
with tab8:
    st.markdown('<div class="stage-title">üß† 8. –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ“£ –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ú–æ–¥–µ–ª—å–¥—ñ“£ –±–æ–ª–∂–∞–º“ì–∞ “õ–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –∫”©–±—ñ—Ä–µ–∫ ”ô—Å–µ—Ä –µ—Ç–µ—Ç—ñ–Ω—ñ.</div>', unsafe_allow_html=True)
    features = ["”©“£—ñ—Ä_–∫–æ–¥", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—Å—É_–¥–µ“£–≥–µ–π—ñ"]
    importances = model.feature_importances_
    df_feat = pd.DataFrame({"–§–∞–∫—Ç–æ—Ä": features, "–ú–∞“£—ã–∑–¥—ã–ª—ã“ì—ã": importances})
    fig_feat = px.bar(df_feat.sort_values("–ú–∞“£—ã–∑–¥—ã–ª—ã“ì—ã", ascending=True), x="–ú–∞“£—ã–∑–¥—ã–ª—ã“ì—ã", y="–§–∞–∫—Ç–æ—Ä", orientation="h", title="–ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ“£ –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã", template=theme)
    st.plotly_chart(fig_feat, use_container_width=True)
