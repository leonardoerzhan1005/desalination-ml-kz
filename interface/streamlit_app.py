import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import plotly.graph_objects as go
from scipy.optimize import minimize
import streamlit.components.v1 as components

# Load models and data
try:
    model = joblib.load("models/kz_model.pkl")
    anomaly_model = joblib.load("models/anomaly_model.pkl")
except FileNotFoundError:
    st.error("–ú–æ–¥–µ–ª—å —Ñ–∞–π–ª–¥–∞—Ä—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. 'kz_model.pkl' –∂”ô–Ω–µ 'anomaly_model.pkl' —Ñ–∞–π–ª–¥–∞—Ä—ã–Ω 'models/' “õ–∞–ª—Ç–∞—Å—ã–Ω–∞ –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—ã“£—ã–∑.")
    st.stop()

try:
    df = pd.read_csv("data/sensor_data_kz_realistic.csv")
    df["—É–∞“õ—ã—Ç"] = pd.to_datetime(df["—É–∞“õ—ã—Ç"])
except FileNotFoundError:
    st.error("–î–µ—Ä–µ–∫—Ç–µ—Ä —Ñ–∞–π–ª—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. 'data/sensor_data_kz_realistic.csv' —Ñ–∞–π–ª—ã–Ω 'data/' “õ–∞–ª—Ç–∞—Å—ã–Ω–∞ –æ—Ä–Ω–∞–ª–∞—Å—Ç—ã—Ä—ã“£—ã–∑.")
    st.stop()

# Set page configuration
st.set_page_config(page_title="–°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –∂“Ø–π–µ—Å—ñ", layout="wide", page_icon="üíß")

# Custom CSS for modern UI
st.markdown("""
<style>
    :root {
        --text-color: #333;
        --bg-color: #F5F7FA;
        --info-bg: #E3F2FD;
        --button-bg: #1E88E5;
        --button-text: #FFFFFF;
        --border-color: #BBDEFB;
    }
    [data-testid="stAppViewContainer"] {
        background-color: var(--bg-color);
        color: var(--text-color);
    }
    .main-title { 
        font-size: 2.5em; 
        color: #1E88E5; 
        text-align: center; 
        margin-bottom: 20px; 
    }
    .stage-title { 
        font-size: 1.8em; 
        color: #1565C0; 
        margin-top: 20px; 
    }
    .info-box { 
        background-color: var(--info-bg); 
        padding: 20px; 
        border-radius: 15px; 
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); 
        margin-bottom: 20px; 
        border: 1px solid var(--border-color);
    }
    .stButton>button { 
        background-color: var(--button-bg); 
        color: var(--button-text); 
        border-radius: 8px; 
        border: none;
        transition: background-color 0.3s;
    }
    .stButton>button:hover {
        background-color: #1565C0;
    }
    .stSlider > div > div > div {
        background-color: #42A5F5;
        border-radius: 10px;
    }
    .stTabs { 
        background-color: var(--info-bg); 
        padding: 10px; 
        border-radius: 15px; 
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    @media (prefers-color-scheme: dark) {
        :root {
            --text-color: #E0E0E0;
            --bg-color: #1A1A1A;
            --info-bg: #263238;
            --button-bg: #42A5F5;
            --button-text: #FFFFFF;
            --border-color: #546E7A;
        }
        [data-testid="stAppViewContainer"] {
            background-color: var(--bg-color);
            color: var(--text-color);
        }
        .main-title, .stage-title {
            color: #42A5F5;
        }
        .info-box {
            box-shadow: 0 4px 12px rgba(255, 255, 255, 0.1);
            border: 1px solid var(--border-color);
        }
    }
</style>
""", unsafe_allow_html=True)

# Detect theme for Plotly
theme = "plotly_dark" if st.get_option("theme.base") == "dark" else "plotly"

# Keyboard navigation
components.html("""
<script>
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowRight') {
            Streamlit.setComponentValue('next_tab');
        } else if (e.key === 'ArrowLeft') {
            Streamlit.setComponentValue('prev_tab');
        }
    });
</script>
""")
tab_action = st.text_input("Tab action", label_visibility="hidden")
if tab_action == "next_tab" and st.session_state.get('current_tab', 0) < 7:
    st.session_state['current_tab'] += 1
    st.rerun()
elif tab_action == "prev_tab" and st.session_state.get('current_tab', 0) > 0:
    st.session_state['current_tab'] -= 1
    st.rerun()

# Main title and help
st.markdown('<div class="main-title">üíß –°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ‚Äì –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ “õ—ã—Å—ã–º –±–æ–ª–∂–∞–º—ã</div>', unsafe_allow_html=True)
st.markdown("–ë“±–ª –±–∞“ì–¥–∞—Ä–ª–∞–º–∞ —Å—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω —Ç–∞–ª–¥–∞—É“ì–∞, “õ—ã—Å—ã–º–¥—ã, —ç–Ω–µ—Ä–≥–∏—è–Ω—ã –∂”ô–Ω–µ —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã –±–æ–ª–∂–∞—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")

with st.expander("‚ÑπÔ∏è –ê–Ω—ã“õ—Ç–∞–º–∞"):
    st.markdown("""
    - **1-–∫–µ–∑–µ“£**: –î–µ—Ä–µ–∫—Ç–µ—Ä “õ“±—Ä—ã–ª—ã–º—ã–Ω –∑–µ—Ä—Ç—Ç–µ“£—ñ–∑.
    - **5-–∫–µ–∑–µ“£**: “ö—ã—Å—ã–º, —ç–Ω–µ—Ä–≥–∏—è –∂”ô–Ω–µ —à—ã“ì—ã–Ω –±–æ–ª–∂–∞–º–¥–∞—Ä—ã–Ω –∫”©—Ä—ñ“£—ñ–∑.
    - **6-–∫–µ–∑–µ“£**: –¢“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω —Ä–µ—Ç—Ç–µ“£—ñ–∑ –∂”ô–Ω–µ —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ“£—ñ–∑.
    - **7-–∫–µ–∑–µ“£**: ”®“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã —Å–∞–ª—ã—Å—Ç—ã—Ä—ã“£—ã–∑.
    """)

# Interactive tour
if st.button("üìñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –Ω“±—Å“õ–∞—É–ª—ã“õ"):
    st.session_state['tour_step'] = 0
tour_step = st.session_state.get('tour_step', -1)
if tour_step == 0:
    st.info("1. '”®“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑' –∞—à—ã–ø, —Ç–∞–ª–¥–∞—É “Ø—à—ñ–Ω ”©“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑.")
    if st.button("–ö–µ–ª–µ—Å—ñ"):
        st.session_state['tour_step'] += 1
        st.rerun()
elif tour_step == 1:
    st.info("2. 6-–∫–µ–∑–µ“£–¥–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ —Ä–µ—Ç—Ç–µ–ø, —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ–Ω –∫”©—Ä—ñ“£—ñ–∑.")
    if st.button("–ê—è“õ—Ç–∞—É"):
        st.session_state['tour_step'] = -1
        st.rerun()

# Tabs for each stage
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8 = st.tabs([
    "1. –î–∞—Ç–∞—Å–µ—Ç", 
    "2. ”®“£—ñ—Ä–ª–µ—Ä", 
    "3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", 
    "4. –ú–æ–¥–µ–ª—å–¥—ñ “Ø–π—Ä–µ—Ç—É", 
    "5. –ë–æ–ª–∂–∞–º", 
    "6. –¢“±—â—ã–ª–∞–Ω–¥—ã—Ä—É", 
    "7. ”®“£—ñ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Å—ã", 
    "8. –ü–∞—Ä–∞–º–µ—Ç—Ä –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã"
])

# Stage 1: Dataset Structure
with tab1:
    st.markdown('<div class="stage-title">üìÅ 1. –î–∞—Ç–∞—Å–µ—Ç “õ“±—Ä—ã–ª—ã–º—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–°–µ–Ω—Å–æ—Ä–ª–∞—Ä–¥–∞–Ω –∂–∏–Ω–∞–ª“ì–∞–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç“±–∑–¥—ã–ª—ã“õ, pH, “õ—ã—Å—ã–º, —Å—É –¥–µ“£–≥–µ–π—ñ, —à—ã“ì—ã–Ω–¥–∞—Ä –∂”ô–Ω–µ ”ô–¥—ñ—Å.</div>', unsafe_allow_html=True)
    uploaded_file = st.file_uploader("–°–µ–Ω—Å–æ—Ä –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω –∂“Ø–∫—Ç–µ—É (CSV)", type="csv")
    if uploaded_file:
        uploaded_df = pd.read_csv(uploaded_file)
        required_cols = ["”©“£—ñ—Ä", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—Å—É_–¥–µ“£–≥–µ–π—ñ", "—Ñ–∏–ª—å—Ç—Ä_—Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ", "–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã", "—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π", "–∑–∞—É—ã—Ç_—Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã"]
        if all(col in uploaded_df.columns for col in required_cols):
            df = uploaded_df
            st.success("–î–µ—Ä–µ–∫—Ç–µ—Ä —Å”ô—Ç—Ç—ñ –∂“Ø–∫—Ç–µ–ª–¥—ñ!")
        else:
            st.error("CSV —Ñ–∞–π–ª—ã “õ–∞–∂–µ—Ç—Ç—ñ –±–∞“ì–∞–Ω–¥–∞—Ä–¥—ã “õ–∞–º—Ç—ã–º–∞–π–¥—ã.")
    rows = st.slider("–ö”©—Ä—Å–µ—Ç—ñ–ª–µ—Ç—ñ–Ω –∂–æ–ª–¥–∞—Ä —Å–∞–Ω—ã", 5, 20, 5, key="dataset_rows")
    st.dataframe(df.head(rows), use_container_width=True)

# Stage 2: Regional Visualization
with tab2:
    st.markdown('<div class="stage-title">üåç 2. ”®“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">”®“£—ñ—Ä —Ç–∞“£–¥–∞–ø, —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ”ô–¥—ñ—Å—Ç–µ—Ä—ñ–Ω—ñ“£ —Ç–∞—Ä–∞–ª—É—ã–Ω –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞–¥–∞ –∫”©—Ä—ñ“£—ñ–∑.</div>', unsafe_allow_html=True)
    selected_region = st.selectbox("”®“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", sorted(df["”©“£—ñ—Ä"].unique()), key="region_select")
    filtered_df = df[df["”©“£—ñ—Ä"] == selected_region]
    fig_map = px.histogram(filtered_df, x="”ô–¥—ñ—Å", title=f"{selected_region} ”©“£—ñ—Ä—ñ–Ω–¥–µ–≥—ñ ”ô–¥—ñ—Å—Ç–µ—Ä –∂–∏—ñ–ª—ñ–≥—ñ", color="”ô–¥—ñ—Å", template=theme)
    st.plotly_chart(fig_map, use_container_width=True)

# Stage 3: Parameter Correlation
with tab3:
    st.markdown('<div class="stage-title">üìä 3. –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –±–∞–π–ª–∞–Ω—ã—Å</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è–ª—ã“õ –º–∞—Ç—Ä–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ“£ ”©–∑–∞—Ä–∞ –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω –∫”©—Ä—Å–µ—Ç–µ–¥—ñ.</div>', unsafe_allow_html=True)
    numeric_cols = ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã", "—ç–Ω–µ—Ä–≥–∏—è_—à—ã“ì—ã–Ω—ã", "–æ–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ_—à—ã“ì—ã–Ω"]
    corr = df[numeric_cols].corr()
    fig_corr = px.imshow(corr, text_auto=True, title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è–ª—ã“õ –º–∞—Ç—Ä–∏—Ü–∞", color_continuous_scale="RdBu", template=theme)
    st.plotly_chart(fig_corr, use_container_width=True)

# Stage 4: Model Training
with tab4:
    st.markdown('<div class="stage-title">üß† 4. –ú–æ–¥–µ–ª—å “õ–∞–ª–∞–π “Ø–π—Ä–µ—Ç—ñ–ª–¥—ñ?</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">RandomForestRegressor “õ—ã—Å—ã–º–¥—ã, —ç–Ω–µ—Ä–≥–∏—è–Ω—ã –∂”ô–Ω–µ —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã –±–æ–ª–∂–∞—É “Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞–π–¥—ã.</div>', unsafe_allow_html=True)
    st.markdown("""
    - **–ú–æ–¥–µ–ª—å**: MultiOutputRegressor(RandomForestRegressor)  
    - **–ù—ã—Å–∞–Ω–∞–ª–∞—Ä**: –®—ã“ì—ã—Å “õ—ã—Å—ã–º—ã, –≠–Ω–µ—Ä–≥–∏—è —à—ã“ì—ã–Ω—ã, –û–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ —à—ã“ì—ã–Ω  
    - **–ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä**: ”®“£—ñ—Ä –∫–æ–¥—ã, –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¢“±–∑–¥—ã–ª—ã“õ, pH, –ö—ñ—Ä—É “õ—ã—Å—ã–º—ã, –°—É –¥–µ“£–≥–µ–π—ñ, –§–∏–ª—å—Ç—Ä —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ, –ú–µ–º–±—Ä–∞–Ω–∞ –∂–∞—Å—ã, –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∂–∞“ì–¥–∞–π, –ó–∞—É—ã—Ç —Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã
    """)
    st.button("–ú–æ–¥–µ–ª—å —Ç—É—Ä–∞–ª—ã —Ç–æ–ª—ã“ì—ã—Ä–∞“õ", help="MultiOutputRegressor –±—ñ—Ä–Ω–µ—à–µ –Ω—ã—Å–∞–Ω–∞–Ω—ã –±–æ–ª–∂–∞—É“ì–∞ –º“Ø–º–∫—ñ–Ω–¥—ñ–∫ –±–µ—Ä–µ–¥—ñ.")

# Stage 5: Model Prediction
with tab5:
    st.markdown('<div class="stage-title">üß™ 5. –ú–æ–¥–µ–ª—å –±–æ–ª–∂–∞–º—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ú–æ–¥–µ–ª—å “õ—ã—Å—ã–º–¥—ã, —ç–Ω–µ—Ä–≥–∏—è–Ω—ã –∂”ô–Ω–µ —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã –±–æ–ª–∂–∞–π–¥—ã, –∞–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä–¥—ã –∞–Ω—ã“õ—Ç–∞–π–¥—ã.</div>', unsafe_allow_html=True)
    valid_df = filtered_df[filtered_df["”ô–¥—ñ—Å"].isin(["–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–∫–µ—Ä—ñ –æ—Å–º–æ—Å"])]
    if len(valid_df) == 0:
        st.warning(f"{selected_region} ”©“£—ñ—Ä—ñ–Ω–¥–µ '–Ω–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è' –Ω–µ–º–µ—Å–µ '–∫–µ—Ä—ñ –æ—Å–º–æ—Å' ”ô–¥—ñ—Å—Ç–µ—Ä—ñ –∂–æ“õ.")
        example = None
    else:
        example = valid_df.sample(1).iloc[0]
        st.markdown(f"""
        **–ú—ã—Å–∞–ª –¥–µ—Ä–µ–∫—Ç–µ—Ä:**  
        - ”®“£—ñ—Ä: {example['”©“£—ñ—Ä']}  
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']} ¬∞C  
        - –¢“±–∑–¥—ã–ª—ã“õ: {example['—Ç“±–∑–¥—ã–ª—ã“õ']} ppm  
        - pH: {example['pH']}  
        - –ö—ñ—Ä—É “õ—ã—Å—ã–º—ã: {example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã']} –±–∞—Ä  
        - –°—É –¥–µ“£–≥–µ–π—ñ: {example['—Å—É_–¥–µ“£–≥–µ–π—ñ']} —Å–º  
        - –§–∏–ª—å—Ç—Ä —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ: {example['—Ñ–∏–ª—å—Ç—Ä_—Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ']}  
        - –ú–µ–º–±—Ä–∞–Ω–∞ –∂–∞—Å—ã: {example['–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã']} –∫“Ø–Ω  
        - –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ –∂–∞“ì–¥–∞–π: {'“ö—ã–∑–º–µ—Ç –∫”©—Ä—Å–µ—Ç—É–¥–µ' if example['—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π'] else '“ö–∞–ª—ã–ø—Ç—ã'}  
        - –ó–∞—É—ã—Ç —Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã: {example['–∑–∞—É—ã—Ç_—Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã']} –º¬≥/—Ç”ô—É–ª—ñ–∫
        """)
        predict_input_dict = {
            "”©“£—ñ—Ä_–∫–æ–¥": example["”©“£—ñ—Ä_–∫–æ–¥"],
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": example["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"],
            "—Ç“±–∑–¥—ã–ª—ã“õ": example["—Ç“±–∑–¥—ã–ª—ã“õ"],
            "pH": example["pH"],
            "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã": example["–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã"],
            "—Å—É_–¥–µ“£–≥–µ–π—ñ": example["—Å—É_–¥–µ“£–≥–µ–π—ñ"],
            "—Ñ–∏–ª—å—Ç—Ä_—Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ": example["—Ñ–∏–ª—å—Ç—Ä_—Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ"],
            "–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã": example["–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã"],
            "—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π": example["—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π"],
            "–∑–∞—É—ã—Ç_—Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã": example["–∑–∞—É—ã—Ç_—Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã"]
        }
        predict_input = pd.DataFrame([predict_input_dict])
        is_anomaly = anomaly_model.predict(predict_input)[0] == -1
        if is_anomaly:
            st.warning("‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è –∞–Ω—ã“õ—Ç–∞–ª–¥—ã! –ë–æ–ª–∂–∞–º –¥”ô–ª –±–æ–ª–º–∞—É—ã –º“Ø–º–∫—ñ–Ω.")
        predictions = model.predict(predict_input)[0]
        st.success(f"""
        üìå –ë–æ–ª–∂–∞–º–¥–∞—Ä:
        - –®—ã“ì—ã—Å “õ—ã—Å—ã–º—ã: **{predictions[0]:.2f} –±–∞—Ä**
        - –≠–Ω–µ—Ä–≥–∏—è —à—ã“ì—ã–Ω—ã: **{predictions[1]:.2f} –∫–í—Ç¬∑—Å–∞“ì/–º¬≥**
        - –û–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ —à—ã“ì—ã–Ω: **{predictions[2]:.2f} $/–º¬≥**
        """)
        
        if predictions[0] < 3:
            st.warning("‚ö†Ô∏è “ö—ã—Å—ã–º —Ç—ã–º —Ç”©–º–µ–Ω ‚Äì —Å“Ø–∑—É —Ç–∏—ñ–º—Å—ñ–∑.")
        elif predictions[0] > 6:
            st.error("‚ùó “ö—ã—Å—ã–º —Ç—ã–º –∂–æ“ì–∞—Ä—ã ‚Äì –º–µ–º–±—Ä–∞–Ω–∞ –∑–∞“õ—ã–º–¥–∞–ª—É—ã –º“Ø–º–∫—ñ–Ω!")
        else:
            st.info("‚úÖ “ö—ã—Å—ã–º –æ–ø—Ç–∏–º–∞–ª–¥—ã!")
        if predictions[1] > 2.5:
            st.warning("‚ö†Ô∏è –≠–Ω–µ—Ä–≥–∏—è —à—ã“ì—ã–Ω—ã –∂–æ“ì–∞—Ä—ã ‚Äì —Ç–∏—ñ–º–¥—ñ–ª—ñ–∫—Ç—ñ –∞—Ä—Ç—Ç—ã—Ä—ã“£—ã–∑.")
        
        pressure_formula = 0.002 * example['—Ç“±–∑–¥—ã–ª—ã“õ'] + 0.04 * example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] - 0.25 * example['pH'] + 0.1 * example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã'] - 0.05 * (example['–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã'] / 365)
        st.write(f"–§–æ—Ä–º—É–ª–∞ –±–æ–π—ã–Ω—à–∞ “õ—ã—Å—ã–º: **{pressure_formula:.2f} –±–∞—Ä**")
        
        weights = {
            "–¢“±–∑–¥—ã–ª—ã“õ": 0.002 * example['—Ç“±–∑–¥—ã–ª—ã“õ'],
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": 0.04 * example['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'],
            "pH (—Ç–µ—Ä—ñ—Å)": -0.25 * example['pH'],
            "–ö—ñ—Ä—É “õ—ã—Å—ã–º—ã": 0.1 * example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã'],
            "–ú–µ–º–±—Ä–∞–Ω–∞ –∂–∞—Å—ã (—Ç–µ—Ä—ñ—Å)": -0.05 * (example['–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã'] / 365)
        }
        df_weights = pd.DataFrame.from_dict(weights, orient="index", columns=["“ö–æ—Å“õ–∞–Ω “Ø–ª–µ—Å—ñ (–±–∞—Ä)"]).reset_index()
        df_weights.rename(columns={"index": "–§–∞–∫—Ç–æ—Ä"}, inplace=True)
        fig_formula = px.bar(df_weights, x="–§–∞–∫—Ç–æ—Ä", y="“ö–æ—Å“õ–∞–Ω “Ø–ª–µ—Å—ñ (–±–∞—Ä)", title="–§–æ—Ä–º—É–ª–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω—ñ“£ “Ø–ª–µ—Å—ñ", text_auto=True, template=theme)
        st.plotly_chart(fig_formula, use_container_width=True)

# Stage 6: Two-Stage Desalination (Enhanced)
with tab6:
    st.markdown('<div class="stage-title">üíß 6. –ï–∫—ñ –∫–µ–∑–µ“£–¥—ñ —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ‚Äì –¢–æ–ª—ã“õ —Ç–∞–ª–¥–∞—É</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∂”ô–Ω–µ –∫–µ—Ä—ñ –æ—Å–º–æ—Å –∞—Ä“õ—ã–ª—ã —Å—É–¥—ã“£ —Ç“±–∑–¥—ã–ª—ã“ì—ã–Ω –∞–∑–∞–π—Ç—É. –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ —Ä–µ—Ç—Ç–µ–ø, —ç–Ω–µ—Ä–≥–∏—è –º–µ–Ω —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ“£—ñ–∑.</div>', unsafe_allow_html=True)

    st.markdown(r"""
    ### üìö –ü—Ä–æ—Ü–µ—Å—Å —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ—Å—ñ
    –ï–∫—ñ –∫–µ–∑–µ“£–¥—ñ —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É:
    1. **–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è**: –û—Ä—Ç–∞—à–∞ –º–æ–ª–µ–∫—É–ª–∞–ª—ã —Ç“±–∑–¥–∞—Ä–¥—ã (50-70% —Ç–∏—ñ–º–¥—ñ–ª—ñ–∫) –∂–æ—è–¥—ã.
    2. **–ö–µ—Ä—ñ –æ—Å–º–æ—Å**: –ö—ñ—à—ñ –º–æ–ª–µ–∫—É–ª–∞–ª—ã “õ–æ—Å–ø–∞–ª–∞—Ä–¥—ã (90-98% —Ç–∏—ñ–º–¥—ñ–ª—ñ–∫) –∂–æ—è–¥—ã.

    **–§–æ—Ä–º—É–ª–∞–ª–∞—Ä:**
    - –ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: $$TDS_{nano} = TDS_0 \times (1 - R_{nano})$$
    - –ö–µ—Ä—ñ –æ—Å–º–æ—Å: $$TDS_{ro} = TDS_{nano} \times (1 - R_{ro})$$
    - –°—É —à—ã“ì—ã–Ω—ã: $$RR = \frac{Q_{out}}{Q_{in}} \times 100\%$$
    - –≠–Ω–µ—Ä–≥–∏—è —à—ã“ì—ã–Ω—ã: $$E = \frac{P \times Q_{in}}{Œ∑ \times 3600}$$
    """)

    if example is None:
        st.warning("–ê–ª–¥—ã“£“ì—ã –∫–µ–∑–µ“£–¥–µ –¥–µ—Ä–µ–∫—Ç–µ—Ä —Ç–∞“£–¥–∞–ª–º–∞“ì–∞–Ω. '–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è' –Ω–µ–º–µ—Å–µ '–∫–µ—Ä—ñ –æ—Å–º–æ—Å' ”ô–¥—ñ—Å—ñ –±–∞—Ä ”©“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑.")
    else:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ —Ä–µ—Ç—Ç–µ—É")
        scenario = st.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π —Ç–∞“£–¥–∞“£—ã–∑", ["“ö–∞–ª—ã–ø—Ç—ã –∂“±–º—ã—Å", "–ñ–æ“ì–∞—Ä—ã —Ç“±–∑–¥—ã–ª—ã“õ", "–ú–µ–º–±—Ä–∞–Ω–∞ –ª–∞—Å—Ç–∞–Ω—É—ã"])
        initial_salinity = float(example['—Ç“±–∑–¥—ã–ª—ã“õ'])
        energy_efficiency = float(example['—Ñ–∏–ª—å—Ç—Ä_—Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ'])
        if scenario == "–ñ–æ“ì–∞—Ä—ã —Ç“±–∑–¥—ã–ª—ã“õ":
            initial_salinity = min(initial_salinity * 1.5, 15000)
        elif scenario == "–ú–µ–º–±—Ä–∞–Ω–∞ –ª–∞—Å—Ç–∞–Ω—É—ã":
            energy_efficiency = max(energy_efficiency * 0.7, 0.7)

        col1, col2 = st.columns(2)
        with col1:
            initial_salinity = st.slider("–ë–∞—Å—Ç–∞–ø“õ—ã —Ç“±–∑–¥—ã–ª—ã“õ (ppm)", 1000.0, 15000.0, initial_salinity, step=100.0)
            r_nano = st.slider("–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ (R_nano)", 0.5, 0.8, 0.6, step=0.01)
            r_ro = st.slider("–ö–µ—Ä—ñ –æ—Å–º–æ—Å —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ (R_ro)", 0.9, 0.98, 0.95, step=0.01)
        with col2:
            input_pressure = st.slider("–ö—ñ—Ä—ñ—Å “õ—ã—Å—ã–º—ã (–±–∞—Ä)", 2.0, 7.0, float(example['–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã']), step=0.1)
            flow_rate = st.slider("–ö—ñ—Ä—ñ—Å –∞“ì—ã–Ω—ã (–º¬≥/—Å–∞“ì)", 1.0, 10.0, 5.0, step=0.5)
            energy_efficiency = st.slider("–≠–Ω–µ—Ä–≥–∏—è —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ (Œ∑)", 0.7, 0.9, energy_efficiency, step=0.01)

        # Calculations
        sal_nano = initial_salinity * (1 - r_nano)
        sal_ro = sal_nano * (1 - r_ro)
        recovery_nano = 0.6
        recovery_ro = 0.4
        total_recovery = recovery_nano * recovery_ro
        output_flow = flow_rate * total_recovery
        energy_nano = (input_pressure * flow_rate) / (energy_efficiency * 3600) * 0.5
        energy_ro = (input_pressure * flow_rate * 1.5) / (energy_efficiency * 3600)
        total_energy = energy_nano + energy_ro
        operational_cost = total_energy * 0.1 + (0.2 if example['—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π'] else 0.05) + 0.01 * (example['–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã'] / 365)

        # Visualization
        st.subheader("üìä –¢“±–∑–¥—ã–ª—ã“õ—Ç—ã“£ —Ç”©–º–µ–Ω–¥–µ—É—ñ")
        stages_df = pd.DataFrame({
            "–ö–µ–∑–µ“£": ["–ë–∞—Å—Ç–∞–ø“õ—ã", "–ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", "–ö–µ—Ä—ñ –æ—Å–º–æ—Å"],
            "–¢“±–∑–¥—ã–ª—ã“õ (ppm)": [initial_salinity, sal_nano, sal_ro]
        })
        fig_stages = px.line(stages_df, x="–ö–µ–∑–µ“£", y="–¢“±–∑–¥—ã–ª—ã“õ (ppm)", markers=True, title="–¢“±–∑–¥—ã–ª—ã“õ—Ç—ã“£ –µ–∫—ñ –∫–µ–∑–µ“£–¥–µ —Ç”©–º–µ–Ω–¥–µ—É—ñ", template=theme)
        fig_stages.add_bar(x=stages_df["–ö–µ–∑–µ“£"], y=[initial_salinity, sal_nano, sal_ro], name="–¢“±–∑–¥—ã–ª—ã“õ", opacity=0.3)
        st.plotly_chart(fig_stages, use_container_width=True)

        # Cost breakdown
        st.subheader("üí∏ –®—ã“ì—ã–Ω–¥–∞—Ä “õ“±—Ä—ã–ª—ã–º—ã")
        cost_breakdown = pd.DataFrame({
            "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç": ["–≠–Ω–µ—Ä–≥–∏—è", "–¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ—ã–∑–º–µ—Ç", "–ú–µ–º–±—Ä–∞–Ω–∞ –∂–∞—Å—ã"],
            "–®—ã“ì—ã–Ω ($/–º¬≥)": [
                total_energy * 0.1,
                0.2 if example['—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π'] else 0.05,
                0.01 * (example['–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã'] / 365)
            ]
        })
        fig_cost_breakdown = px.pie(cost_breakdown, values="–®—ã“ì—ã–Ω ($/–º¬≥)", names="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", title="–û–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ —à—ã“ì—ã–Ω–¥–∞—Ä–¥—ã“£ “õ“±—Ä—ã–ª—ã–º—ã", template=theme)
        st.plotly_chart(fig_cost_breakdown, use_container_width=True)

        # Results
        st.subheader("üìà –ù”ô—Ç–∏–∂–µ–ª–µ—Ä")
        st.markdown(f"""
        - **–°–æ“£“ì—ã —Ç“±–∑–¥—ã–ª—ã“õ**: {sal_ro:.2f} ppm ({ 'üü¢ –ê—É—ã–∑ —Å—É“ì–∞ –∂–∞—Ä–∞–º–¥—ã' if sal_ro <= 500 else 'üî¥ –ê—É—ã–∑ —Å—É“ì–∞ –∂–∞—Ä–∞–º—Å—ã–∑' })
        - **–°—É —à—ã“ì—ã–Ω—ã**: {output_flow:.2f} –º¬≥/—Å–∞“ì ({total_recovery*100:.1f}%)
        - **–≠–Ω–µ—Ä–≥–∏—è —à—ã“ì—ã–Ω—ã**: {total_energy:.2f} –∫–í—Ç¬∑—Å–∞“ì/–º¬≥  
          - –ù–∞–Ω–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {energy_nano:.2f} –∫–í—Ç¬∑—Å–∞“ì/–º¬≥  
          - –ö–µ—Ä—ñ –æ—Å–º–æ—Å: {energy_ro:.2f} –∫–í—Ç¬∑—Å–∞“ì/–º¬≥
        - **–û–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ —à—ã“ì—ã–Ω**: {operational_cost:.2f} $/–º¬≥
        """)

        # Optimization
        st.subheader("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        target_salinity = st.number_input("–ú–∞“õ—Å–∞—Ç—Ç—ã —Ç“±–∑–¥—ã–ª—ã“õ (ppm)", 100, 500, 500)
        def objective(params):
            r_nano, r_ro, pressure = params
            sal_nano = initial_salinity * (1 - r_nano)
            sal_ro = sal_nano * (1 - r_ro)
            energy = (pressure * flow_rate * (1.5 if r_ro > 0.95 else 1.0)) / (energy_efficiency * 3600)
            cost = energy * 0.1 + (0.2 if example['—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π'] else 0.05) + 0.01 * (example['–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã'] / 365)
            return cost if sal_ro <= target_salinity else cost + 1000
        result = minimize(objective, [0.6, 0.95, 4.5], bounds=[(0.5, 0.8), (0.9, 0.98), (2.0, 7.0)])
        if result.success:
            st.write(f"–û–ø—Ç–∏–º–∞–ª–¥—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä: R_nano={result.x[0]:.2f}, R_ro={result.x[1]:.2f}, “ö—ã—Å—ã–º={result.x[2]:.2f} –±–∞—Ä, –®—ã“ì—ã–Ω={result.fun:.2f} $/–º¬≥")
        else:
            st.error("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã.")

        # Recommendations
        st.subheader("üí° “∞—Å—ã–Ω—ã—Å—Ç–∞—Ä")
        if sal_ro > 500:
            st.warning("–¢“±–∑–¥—ã–ª—ã“õ –∂–æ“ì–∞—Ä—ã. R_nano –Ω–µ–º–µ—Å–µ R_ro —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ–Ω –∞—Ä—Ç—Ç—ã—Ä—ã“£—ã–∑.")
        if total_energy > 2.5:
            st.warning("–≠–Ω–µ—Ä–≥–∏—è —à—ã“ì—ã–Ω—ã –∂–æ“ì–∞—Ä—ã. –≠–Ω–µ—Ä–≥–∏—è —Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ–Ω (Œ∑) –∞—Ä—Ç—Ç—ã—Ä—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ “õ—ã—Å—ã–º–¥—ã –∞–∑–∞–π—Ç—ã“£—ã–∑.")
        if total_recovery < 0.2:
            st.warning("–°—É —à—ã“ì—ã–Ω—ã —Ç”©–º–µ–Ω. –§–∏–ª—å—Ç—Ä–ª–µ—Ä–¥—ñ —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.")
        if operational_cost > 1.0:
            st.warning("–û–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ —à—ã“ì—ã–Ω –∂–æ“ì–∞—Ä—ã. –¢–µ—Ö–Ω–∏–∫–∞–ª—ã“õ “õ—ã–∑–º–µ—Ç—Ç—ñ –∂–æ—Å–ø–∞—Ä–ª–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ –º–µ–º–±—Ä–∞–Ω–∞–Ω—ã –∞—É—ã—Å—Ç—ã—Ä—ã“£—ã–∑.")

# Stage 7: Regional Statistics
with tab7:
    st.markdown('<div class="stage-title">üìä 7. ”®“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">”®“£—ñ—Ä–ª–µ—Ä–¥—ñ“£ –æ—Ä—Ç–∞—à–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ –º–µ–Ω —à—ã“ì—ã–Ω–¥–∞—Ä—ã. –ï“£ –∂–æ“ì–∞—Ä—ã –º”ô–Ω–¥–µ—Ä –µ—Ä–µ–∫—à–µ–ª–µ–Ω–µ–¥—ñ.</div>', unsafe_allow_html=True)
    region_summary = df.groupby("”©“£—ñ—Ä")[["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã", "—ç–Ω–µ—Ä–≥–∏—è_—à—ã“ì—ã–Ω—ã", "–æ–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ_—à—ã“ì—ã–Ω"]].mean().round(2).reset_index()
    st.dataframe(region_summary.style.highlight_max(axis=0), use_container_width=True)
    cost_summary = df.groupby("”©“£—ñ—Ä")[["—ç–Ω–µ—Ä–≥–∏—è_—à—ã“ì—ã–Ω—ã", "–æ–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ_—à—ã“ì—ã–Ω"]].mean().reset_index()
    fig_cost = px.bar(cost_summary, x="”©“£—ñ—Ä", y=["—ç–Ω–µ—Ä–≥–∏—è_—à—ã“ì—ã–Ω—ã", "–æ–ø–µ—Ä–∞—Ü–∏—è–ª—ã“õ_—à—ã“ì—ã–Ω"], barmode="group", title="”®“£—ñ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ —à—ã“ì—ã–Ω–¥–∞—Ä", template=theme)
    st.plotly_chart(fig_cost, use_container_width=True)

# Stage 8: Feature Importance
with tab8:
    st.markdown('<div class="stage-title">üß† 8. –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ“£ –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã</div>', unsafe_allow_html=True)
    st.markdown('<div class="info-box">–ú–æ–¥–µ–ª—å–¥—ñ“£ –±–æ–ª–∂–∞–º“ì–∞ “õ–∞–π –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä –∫”©–±—ñ—Ä–µ–∫ ”ô—Å–µ—Ä –µ—Ç–µ—Ç—ñ–Ω—ñ.</div>', unsafe_allow_html=True)
    features = model.estimators_[0].feature_names_in_ if hasattr(model.estimators_[0], 'feature_names_in_') else ["”©“£—ñ—Ä_–∫–æ–¥", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—Å—É_–¥–µ“£–≥–µ–π—ñ", "—Ñ–∏–ª—å—Ç—Ä_—Ç–∏—ñ–º–¥—ñ–ª—ñ–≥—ñ", "–º–µ–º–±—Ä–∞–Ω–∞_–∂–∞—Å—ã", "—Ç–µ—Ö–Ω–∏–∫–∞–ª—ã“õ_–∂–∞“ì–¥–∞–π", "–∑–∞—É—ã—Ç_—Å—ã–π—ã–º–¥—ã–ª—ã“ì—ã"]
    importances = np.mean([est.feature_importances_ for est in model.estimators_], axis=0)
    df_feat = pd.DataFrame({"–§–∞–∫—Ç–æ—Ä": features, "–ú–∞“£—ã–∑–¥—ã–ª—ã“ì—ã": importances})
    fig_feat = px.bar(df_feat.sort_values("–ú–∞“£—ã–∑–¥—ã–ª—ã“ì—ã", ascending=True), x="–ú–∞“£—ã–∑–¥—ã–ª—ã“ì—ã", y="–§–∞–∫—Ç–æ—Ä", orientation="h", title="–ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ“£ –º–∞“£—ã–∑–¥—ã–ª—ã“ì—ã", template=theme)
    st.plotly_chart(fig_feat, use_container_width=True)