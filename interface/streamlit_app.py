import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from fpdf import FPDF

# –ú–æ–¥–µ–ª—å–¥—ñ –∂“Ø–∫—Ç–µ—É
model = joblib.load("models/kz_model.pkl")

# –ñ–æ“ì–∞—Ä—ã –¥”ô–ª–¥—ñ–∫—Ç—ñ –¥–∞—Ç–∞
history_path = "data/prediction_history.csv"
if os.path.exists(history_path):
    history_df = pd.read_csv(history_path)
else:
    history_df = pd.DataFrame(columns=[
        "”©“£—ñ—Ä", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ç“±–∑–¥—ã–ª—ã“õ", "pH", "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã", "—Å—É_–¥–µ“£–≥–µ–π—ñ", "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã"
    ])

# –†–µ–∞–ª–∏—Å—Ç—ñ–∫ –¥–∞—Ç–∞—Å–µ—Ç—Ç—ñ –∂“Ø–∫—Ç–µ—É (–∞–Ω–∞–ª–∏–∑ “Ø—à—ñ–Ω)
df = pd.read_csv("data/sensor_data_kz_realistic.csv")
df["—É–∞“õ—ã—Ç"] = pd.to_datetime(df["—É–∞“õ—ã—Ç"])

st.set_page_config(page_title="–°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –∂“Ø–π–µ—Å—ñ", layout="centered")
st.title("üíß –°—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É ‚Äì “õ—ã—Å—ã–º –±–æ–ª–∂–∞–º—ã")

with st.expander("‚ÑπÔ∏è –ñ“Ø–π–µ —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç"):
    st.markdown("""
    –ë“±–ª –∂“Ø–π–µ **—Å—É–¥—ã —Ç“±—â—ã–ª–∞–Ω–¥—ã—Ä—É –ø—Ä–æ—Ü–µ—Å—ñ–Ω –∞–≤—Ç–æ–º–∞—Ç—Ç—ã –±–∞—Å“õ–∞—Ä—É“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω**.

    üß† **–ñ–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç** –∞—Ä“õ—ã–ª—ã –µ–Ω–≥—ñ–∑—ñ–ª–≥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–≥–µ “õ–∞—Ä–∞–ø,
    “õ–∞–∂–µ—Ç—Ç—ñ —à—ã“ì—ã—Å “õ—ã—Å—ã–º—ã–Ω –±–æ–ª–∂–∞–π–¥—ã.

    **–ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä:** —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Ç“±–∑–¥—ã–ª—ã“õ, pH, “õ—ã—Å—ã–º, —Å—É –¥–µ“£–≥–µ–π—ñ, ”©“£—ñ—Ä
    """)

# üìê –§–æ—Ä–º—É–ª–∞–ª–∞—Ä –º–µ–Ω —Ç–µ–æ—Ä–∏—è
with st.expander("üìê –§–æ—Ä–º—É–ª–∞–ª–∞—Ä –º–µ–Ω —Ç–µ–æ—Ä–∏—è"):
    st.latex(r"""
    \text{P}_{—à—ã“ì—ã—Å} = 0.0025 \cdot \text{TDS} + 0.05 \cdot \text{Temp} - 0.3 \cdot \text{pH} + \varepsilon
    """)
    st.latex(r"""
    \pi = iMRT
    """)
    st.markdown("""
    **–ú“±–Ω–¥–∞“ì—ã:**
    - **TDS** ‚Äî —Ç“±–∑–¥—ã–ª—ã“õ (ppm)
    - **Temp** ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)
    - **pH** ‚Äî —Å—É “õ—ã—à“õ—ã–ª–¥—ã“ì—ã
    - **\( \varepsilon \)** ‚Äî –º–æ–¥–µ–ª—å–¥–µ–≥—ñ –∫–µ–∑–¥–µ–π—Å–æ“õ –∞—É—ã—Ç“õ—É (–Ω–æ—Ä–º–∞–ª—å –±”©–ª—ñ–Ω–≥–µ–Ω)
    - **\( \pi \)** ‚Äî –æ—Å–º–æ—Å—Ç—ã“õ “õ—ã—Å—ã–º
    - **i** ‚Äî –í–∞–Ω-–ì–æ—Ñ—Ñ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ñ
    - **M** ‚Äî –º–æ–ª—è—Ä–ª—ã“õ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è
    - **R** ‚Äî –≥–∞–∑ —Ç“±—Ä–∞“õ—Ç—ã—Å—ã
    - **T** ‚Äî —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–ö)
    """)

# –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä–¥—ñ –µ–Ω–≥—ñ–∑—É
region_mapping = {
    "–ú–∞“£“ì—ã—Å—Ç–∞—É": 0,
    "“ö—ã–∑—ã–ª–æ—Ä–¥–∞": 1,
    "–ê–ª–º–∞—Ç—ã": 2,
    "“ö–æ—Å—Ç–∞–Ω–∞–π": 3,
    "–ê—Ç—ã—Ä–∞—É": 4
}
region_name = st.selectbox("”®“£—ñ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑", list(region_mapping.keys()))
region_code = region_mapping[region_name]
temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 0.0, 45.0, 25.0)
salinity = st.slider("–¢“±–∑–¥—ã–ª—ã“õ (ppm)", 1000, 10000, 4000)
ph = st.slider("pH", 5.0, 9.0, 7.0)
input_pressure = st.slider("–ö—ñ—Ä—É “õ—ã—Å—ã–º—ã (–±–∞—Ä)", 1.0, 6.0, 3.0)
water_level = st.slider("–°—É –¥–µ“£–≥–µ–π—ñ (—Å–º)", 0.0, 100.0, 60.0)

if st.button("üîç –ë–æ–ª–∂–∞–º –∂–∞—Å–∞—É"):
    input_data = pd.DataFrame([{
        "”©“£—ñ—Ä_–∫–æ–¥": region_code,
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": temperature,
        "—Ç“±–∑–¥—ã–ª—ã“õ": salinity,
        "pH": ph,
        "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã": input_pressure,
        "—Å—É_–¥–µ“£–≥–µ–π—ñ": water_level
    }])

    prediction = model.predict(input_data)[0]
    st.success(f"üîß –ë–æ–ª–∂–∞–Ω“ì–∞–Ω —à—ã“ì—ã—Å “õ—ã—Å—ã–º—ã: {prediction:.2f} –±–∞—Ä")

    new_row = {
        "”©“£—ñ—Ä": region_name,
        "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": temperature,
        "—Ç“±–∑–¥—ã–ª—ã“õ": salinity,
        "pH": ph,
        "–∫—ñ—Ä—É_“õ—ã—Å—ã–º—ã": input_pressure,
        "—Å—É_–¥–µ“£–≥–µ–π—ñ": water_level,
        "—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã": prediction
    }
    history_df = pd.concat([history_df, pd.DataFrame([new_row])], ignore_index=True)
    history_df.to_csv(history_path, index=False)

# –ì—Ä–∞—Ñ–∏–∫—Ç–µ—Ä –∂”ô–Ω–µ –∞–Ω–∞–ª–∏–∑ –±”©–ª—ñ–º—ñ
st.header("üìä –ê–Ω–∞–ª–∏–∑ –±”©–ª—ñ–º—ñ")

if st.checkbox("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ (—Ç–∞—Ä–∞–ª—É—ã)"):
    st.subheader("–°—É –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω—ñ“£ —Ç–∞—Ä–∞–ª—É—ã")
    fig1 = px.histogram(df, x="—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã", nbins=50, title="–®—ã“ì—ã—Å “õ—ã—Å—ã–º—ã–Ω—ã“£ —Ç–∞—Ä–∞–ª—É—ã")
    st.plotly_chart(fig1)

if st.checkbox("”ò–¥—ñ—Å—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ “õ—ã—Å—ã–º (Boxplot)"):
    st.subheader("”ò–¥—ñ—Å—Ç–µ—Ä –º–µ–Ω “õ—ã—Å—ã–º –∞—Ä–∞—Å—ã–Ω–¥–∞“ì—ã –±–∞–π–ª–∞–Ω—ã—Å")
    fig2 = px.box(df, x="”ô–¥—ñ—Å", y="—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã", title="”ò–¥—ñ—Å—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ —à—ã“ì—ã—Å “õ—ã—Å—ã–º—ã")
    st.plotly_chart(fig2)

if st.checkbox("–£–∞“õ—ã—Ç –±–æ–π—ã–Ω—à–∞ “õ—ã—Å—ã–º (Line)"):
    st.subheader("–£–∞“õ—ã—Ç –±–æ–π—ã–Ω—à–∞ “õ—ã—Å—ã–º –¥–∏–Ω–∞–º–∏–∫–∞—Å—ã")
    fig3 = px.line(df, x="—É–∞“õ—ã—Ç", y="—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã", title="–®—ã“ì—ã—Å “õ—ã—Å—ã–º—ã–Ω—ã“£ —É–∞“õ—ã—Ç –±–æ–π—ã–Ω—à–∞ ”©–∑–≥–µ—Ä—ñ—Å—ñ")
    st.plotly_chart(fig3)

if st.checkbox("–ê–Ω–æ–º–∞–ª–∏—è–ª–∞—Ä (pH –∂”ô–Ω–µ “õ—ã—Å—ã–º)"):
    st.subheader("–ê–Ω–æ–º–∞–ª–∏—è–ª—ã“õ –º”ô–Ω–¥–µ—Ä –±–æ–π—ã–Ω—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞")
    anom_df = df[df["–∞–Ω–æ–º–∞–ª–∏—è"] == 1]
    fig4 = px.scatter(anom_df, x="pH", y="—à—ã“ì—ã—Å_“õ—ã—Å—ã–º—ã", color="”ô–¥—ñ—Å",
                      title="–ê–Ω–æ–º–∞–ª–∏—è–ª—ã“õ –∂–∞“ì–¥–∞–π–ª–∞—Ä–¥–∞“ì—ã pH –ø–µ–Ω “õ—ã—Å—ã–º")
    st.plotly_chart(fig4)

if st.checkbox("“ö–∞—Ç—Ç—ã —Å—É –∂–∏—ñ–ª—ñ–≥—ñ"):
    st.subheader("”ò–¥—ñ—Å—Ç–µ—Ä–¥–µ–≥—ñ “õ–∞—Ç—Ç—ã —Å—É–¥—ã“£ “Ø–ª–µ—Å—ñ")
    pivot = df.pivot_table(index="”ô–¥—ñ—Å", values="“õ–∞—Ç—Ç—ã_—Å—É", aggfunc="mean")
    st.bar_chart(pivot)

if st.checkbox("–ñ–æ“ì–∞—Ä—ã “õ—ã—Å—ã–º —Ç–∞–ª–∞–ø –µ—Ç—ñ–ª–µ—Ç—ñ–Ω ”ô–¥—ñ—Å—Ç–µ—Ä"):
    st.subheader("”ò–¥—ñ—Å—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ –∂–æ“ì–∞—Ä—ã “õ—ã—Å—ã–º –∂–∏—ñ–ª—ñ–≥—ñ")
    pivot2 = df.pivot_table(index="”ô–¥—ñ—Å", values="–∂–æ“ì–∞—Ä—ã_“õ—ã—Å—ã–º_—Ç–∞–ª–∞–ø", aggfunc="mean")
    st.bar_chart(pivot2)

if st.checkbox("üì• –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É (CSV)"):
    st.download_button("‚¨áÔ∏è CSV-—Ç—ñ –∂“Ø–∫—Ç–µ—É", data=df.to_csv(index=False), file_name="kz_data.csv")
